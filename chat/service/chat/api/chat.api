syntax = "v1"

import (
	"doc/user.api"
	"doc/chat.api"
	"doc/bots.api"
)

info (
	title:   "chat service api"
	desc:    "chat service api desc"
	author:  "type author here"
	email:   "type email here"
	version: "v1"
)

@server (
	middleware: AccessLog // 路由中间件声明
	prefix:     /api
)
service chat-api {
	@handler UserRegisterHandler
	post /user/register (UserRegisterReq) returns (UserRegisterReply)

	@handler UserLoginHandler
	post /user/login (UserLoginReq) returns (UserLoginReply)
}

// 需要鉴权的服务
@server (
	middleware: AccessLog // 路由中间件声明
	prefix:     /api
	jwt:        Auth // jwt中间件声明
)
service chat-api {
	@handler ChatHandler
	post /msg/push (ChatReq) returns (ChatReply)

	@handler CustomerChatHandler
	post /msg/customer/push (CustomerChatReq) returns (CustomerChatReply)

	@handler UserDetailHandler
	get /user/detail (UserDetailReq) returns (UserDetailReply)

	// bot 相关业务
	@handler BotCreateHandler
	post /bot/create (BotCreateReq) returns (BotCreateReply)

	@handler BotUpdateHandler
	post /bot/update (BotUpdateReq) returns (BotUpdateReply)

	@handler BotDeleteHandler
	post /bot/delete (BotDeleteReq) returns (BotDeleteReply)

	@handler BotDetailHandler
	post /bot/detail (BotDetailReq) returns (BotDetailReply)

	@handler BotListHandler
	post /bot/list (BotListReq) returns (BotListReply)

	@handler BotPromptUpdateHandler
	post /bot/prompt/update (BotPromptUpdateReq) returns (BotPromptUpdateReply)

	@handler BotReplicateHandler
	post /bot/replicate (BotReplicateReq) returns (BotReplicateReply)

	// chat with bot
	@handler BotChatHandler
	post /bot/chat (BotChatReq) returns (BotChatReply)

	// chat with bot whole history
	@handler BotChatHistoryHandler
	post /bot/chat/history (BotChatHistoryReq) returns (BotChatHistoryReply)

	// clear chat history
	@handler BotChatHistoryClearHandler
	post /bot/chat/history/clear (BotChatHistoryClearReq) returns (BotChatHistoryClearReply)

	// optimize prompt
	@handler BotOptimizePromptHandler
	post /bot/prompt/optimize (BotOptimizePromptReq) returns (BotOptimizePromptReply)
}

