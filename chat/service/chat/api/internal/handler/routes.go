// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	"chat/service/chat/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/login",
					Handler: UserLoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/register",
					Handler: UserRegisterHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AccessLog},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/bot/chat",
					Handler: BotChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/chat/history",
					Handler: BotChatHistoryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/chat/history/clear",
					Handler: BotChatHistoryClearHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/create",
					Handler: BotCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/customer/list",
					Handler: CustomerListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/customer/update",
					Handler: BotCustomerUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/delete",
					Handler: BotDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/detail",
					Handler: BotDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/explore/list",
					Handler: BotExploreListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/list",
					Handler: BotListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/model/detail",
					Handler: BotModelDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/model/update",
					Handler: BotModelUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/prompt/optimize",
					Handler: BotOptimizePromptHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/prompt/update",
					Handler: BotPromptUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/replicate",
					Handler: BotReplicateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bot/update",
					Handler: BotUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/customer/push",
					Handler: CustomerChatHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/msg/push",
					Handler: ChatHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/user/detail",
					Handler: UserDetailHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)
}
